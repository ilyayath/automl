import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import streamlit as st
import numpy as np
from ydata_profiling import ProfileReport

def basic_eda(df):
    st.write("**–†–æ–∑–º—ñ—Ä–Ω—ñ—Å—Ç—å –¥–∞—Ç–∞—Å–µ—Ç—É:**", df.shape)
    st.write("**–û–ø–∏—Å–æ–≤—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:**")
    st.dataframe(df.describe())
    st.write("**–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫—ñ–≤:**")
    st.dataframe(df.isnull().sum())
    st.write("**–ß–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏**", df.select_dtypes(include=["int64", "float64"]).columns)
    st.write("**–ß–∏—Å–ª–æ–≤—ñ –∫–æ–ª–æ–Ω–∫–∏**", df.select_dtypes(include=["object"]).columns)

def pairplot_top_corr(df, n=4):
    num_df = df.select_dtypes(include='number')
    corr = num_df.corr().abs().unstack().sort_values(ascending=False)
    corr = corr[corr < 1].drop_duplicates()
    top_pairs = corr.head(n).index

    cols = list(set([i for pair in top_pairs for i in pair]))

    st.write("üîó **Pairplot –¥–ª—è —Ç–æ–ø-–∑–≤‚Äô—è–∑–∞–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö**")
    fig = sns.pairplot(df[cols])
    st.pyplot(fig)

def plot_distributions(df):
    num_cols = df.select_dtypes(include='number').columns

    sns.set_style("whitegrid")
    plt.rcParams['font.family'] = 'Arial'
    plt.rcParams['figure.figsize'] = (10, 6)

    st.write("**–†–æ–∑–ø–æ–¥—ñ–ª–∏ —á–∏—Å–ª–æ–≤–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö**")

    for col in num_cols:
        fig, ax = plt.subplots()

        sns.histplot(
            data=df[col].dropna(),
            kde=True,
            color='#1f77b4',
            bins=30,
            stat='density',
            alpha=0.6,
            ax=ax
        )

        kde_line = ax.lines[0]
        kde_line.set_color('#ff7f0e')
        kde_line.set_linewidth(2.5)

        ax.set_title(f'–†–æ–∑–ø–æ–¥—ñ–ª –∑–º—ñ–Ω–Ω–æ—ó: {col}', fontsize=16, weight='bold', pad=15)
        ax.set_xlabel(col, fontsize=12)
        ax.set_ylabel('–©—ñ–ª—å–Ω—ñ—Å—Ç—å', fontsize=12)

        ax.tick_params(axis='both', which='major', labelsize=10)

        ax.grid(True, linestyle='--', alpha=0.7)

        sns.despine(ax=ax, top=True, right=True)

        st.pyplot(fig)

        plt.close(fig)

def group_stats_with_plots(df, target_col):
    st.markdown(f"### üìä –ì—Ä—É–ø–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü—ñ–ª—å–æ–≤—ñ–π –∑–º—ñ–Ω–Ω—ñ–π: `{target_col}`")

    if target_col not in df.columns:
        st.warning("‚õî –û–±—Ä–∞–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –≤—ñ–¥—Å—É—Ç–Ω—è –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ñ.")
        return

    if df[target_col].nunique() > 25:
        st.warning("‚ö† –ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω—å —É —Ü—ñ–ª—å–æ–≤—ñ–π –∑–º—ñ–Ω–Ω—ñ–π –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è.")
        return

    # –í–∏–±–∏—Ä–∞—î–º–æ —á–∏—Å–ª–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ, –æ–∫—Ä—ñ–º target
    num_cols = df.select_dtypes(include='number').columns
    num_cols = [col for col in num_cols if col != target_col]

    if not num_cols:
        st.warning("‚õî –£ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ñ –Ω–µ–º–∞—î —á–∏—Å–ª–æ–≤–∏—Ö –æ–∑–Ω–∞–∫, –æ–∫—Ä—ñ–º —Ü—ñ–ª—å–æ–≤–æ—ó.")
        return

    # –ê–≥—Ä–µ–≥–æ–≤–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
    st.subheader("üìã –ó–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    agg_df = df.groupby(target_col)[num_cols].agg(["mean", "std", "count"])
    st.dataframe(agg_df)

    # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—ó
    st.subheader("üìà –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è —Å–µ—Ä–µ–¥–Ω—ñ—Ö –∑–Ω–∞—á–µ–Ω—å")

    for col in num_cols:
        fig, ax = plt.subplots()
        sns.barplot(data=df, x=target_col, y=col, ci='sd', palette="pastel", ax=ax)

        ax.set_title(f"{col} –∑–∞ –≥—Ä—É–ø–∞–º–∏ {target_col}", fontsize=14, weight='bold')
        ax.set_xlabel(str(target_col), fontsize=12)
        ax.set_ylabel(f"–°–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è {col}", fontsize=12)
        ax.grid(True, linestyle='--', alpha=0.6)

        st.pyplot(fig)
        plt.close(fig)

def plot_categorical_counts(df):
    cat_cols = df.select_dtypes(include='object').columns
    st.write("üìä **–†–æ–∑–ø–æ–¥—ñ–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–∞–ª—å–Ω–∏—Ö –∑–º—ñ–Ω–Ω–∏—Ö**")
    for col in cat_cols:
        fig, ax = plt.subplots()
        df[col].value_counts().plot(kind='bar', ax=ax, color='#1f77b4')
        ax.set_title(f'–ß–∞—Å—Ç–æ—Ç–∏: {col}', fontsize=14, weight='bold')
        ax.set_ylabel('–ö—ñ–ª—å–∫—ñ—Å—Ç—å')
        st.pyplot(fig)
        plt.close(fig)

def plot_boxplots(df):
    num_cols = df.select_dtypes(include='number').columns

    sns.set_style("whitegrid")
    plt.rcParams['font.family'] = 'Arial'
    plt.rcParams['figure.figsize'] = (10, 6)

    st.write("**Boxplots –¥–ª—è –≤–∏—è–≤–ª–µ–Ω–Ω—è –≤–∏–∫–∏–¥—ñ–≤**")

    for col in num_cols:
        fig, ax = plt.subplots()

        sns.boxplot(
            x=df[col].dropna(),
            ax=ax,
            color='#1f77b4',
            boxprops=dict(alpha=0.6),
            whiskerprops=dict(color='#1f77b4', linestyle='--'),
            capprops=dict(color='#1f77b4'),
            medianprops=dict(color='#ff7f0e', linewidth=2.5),
            flierprops=dict(marker='o', markersize=8, markerfacecolor='#ff7f0e', alpha=0.7)
        )

        ax.set_title(f'–Ø—â–∏–∫–æ–≤–∞ –¥—ñ–∞–≥—Ä–∞–º–∞: {col}', fontsize=16, weight='bold', pad=15)
        ax.set_xlabel(col, fontsize=12)
        ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–Ω—è', fontsize=12)

        ax.tick_params(axis='both', which='major', labelsize=10)

        ax.grid(True, linestyle='--', alpha=0.7)

        sns.despine(ax=ax, top=True, right=True)

        st.pyplot(fig)

        plt.close(fig)

def plot_correlation(df):
    num_cols = df.select_dtypes(include='number')

    corr = num_cols.corr()

    sns.set_style("white")
    plt.rcParams['font.family'] = 'Arial'

    st.write(" **–ö–æ—Ä–µ–ª—è—Ü—ñ–π–Ω–∞ —Ç–µ–ø–ª–æ–∫–∞—Ä—Ç–∞**")

    fig, ax = plt.subplots(figsize=(10, 8))

    sns.heatmap(
        corr,
        annot=True,
        fmt='.2f',
        cmap='RdBu_r',
        ax=ax,
        square=True,
        vmin=-1, vmax=1,
        cbar_kws={'label': '–ö–æ–µ—Ñ—ñ—Ü—ñ—î–Ω—Ç –∫–æ—Ä–µ–ª—è—Ü—ñ—ó'},
        annot_kws={'size': 10},
        linewidths=0.5,
        linecolor='white'
    )

    ax.set_title('–¢–µ–ø–ª–æ–≤–∞ –∫–∞—Ä—Ç–∞ –∫–æ—Ä–µ–ª—è—Ü—ñ–π', fontsize=16, weight='bold', pad=15)
    ax.tick_params(axis='both', which='major', labelsize=10)

    plt.xticks(rotation=45, ha='right')
    plt.yticks(rotation=0)

    plt.tight_layout()

    st.pyplot(fig)

    plt.close(fig)

def generate_profile_report(df):
    st.write("üîé **–ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç ydata-profiling... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É.**")

    profile = ProfileReport(df, explorative=True, title="EDA –∑–≤—ñ—Ç")

    report_file = "eda_report.html"
    profile.to_file(report_file)

    st.success("‚úÖ –ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª—ñ eda_report.html")
    with open(report_file, 'rb') as f:
        st.download_button(
            label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç",
            data=f,
            file_name=report_file,
            mime='text/html'
        )

    st.write("**–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –ø–µ—Ä–µ–≥–ª—è–¥ –∑–≤—ñ—Ç—É:**")
    st.components.v1.html(
        open(report_file, 'r', encoding='utf-8').read(),
        height=600, scrolling=True
    )

def detect_outlier(df, const_for_iqr):
    st.write("**–í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π –≤ –¥–∞–Ω–∏—Ö –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é IQR**")
    num_cols = df.select_dtypes(include=['int64', 'float64']).columns
    outliers_info = {}

    for col in num_cols:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - const_for_iqr * IQR
        upper_bound = Q3 + const_for_iqr * IQR
        outliers = ((df[col] > upper_bound) | (df[col] < lower_bound)).sum()
        outliers_info[col] = outliers

    outlier_df = pd.DataFrame.from_dict(outliers_info, orient='index', columns=['–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–æ–º–∞–ª—ñ–π'])
    st.write("–ü–æ—Ç–µ–Ω—Ü—ñ–∞–ª—å–Ω—ñ –∞–Ω–æ–º–∞–ª—ñ—ó")
    st.dataframe(outlier_df.sort_values(by="–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–Ω–æ–º–∞–ª—ñ–π", ascending=False))
